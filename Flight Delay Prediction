{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":4295427,"sourceType":"datasetVersion","datasetId":2529204}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-01T08:03:41.444861Z","iopub.execute_input":"2024-07-01T08:03:41.445541Z","iopub.status.idle":"2024-07-01T08:03:42.522148Z","shell.execute_reply.started":"2024-07-01T08:03:41.445500Z","shell.execute_reply":"2024-07-01T08:03:42.520955Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/flight-delay-dataset-20182022/Combined_Flights_2022.parquet\n/kaggle/input/flight-delay-dataset-20182022/Combined_Flights_2021.parquet\n/kaggle/input/flight-delay-dataset-20182022/Combined_Flights_2018.csv\n/kaggle/input/flight-delay-dataset-20182022/Combined_Flights_2018.parquet\n/kaggle/input/flight-delay-dataset-20182022/Airlines.csv\n/kaggle/input/flight-delay-dataset-20182022/readme.md\n/kaggle/input/flight-delay-dataset-20182022/Combined_Flights_2022.csv\n/kaggle/input/flight-delay-dataset-20182022/Combined_Flights_2020.csv\n/kaggle/input/flight-delay-dataset-20182022/Combined_Flights_2020.parquet\n/kaggle/input/flight-delay-dataset-20182022/Combined_Flights_2019.csv\n/kaggle/input/flight-delay-dataset-20182022/readme.html\n/kaggle/input/flight-delay-dataset-20182022/Combined_Flights_2021.csv\n/kaggle/input/flight-delay-dataset-20182022/Combined_Flights_2019.parquet\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2018_7.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2018_6.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2020_1.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2018_1.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2022_1.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2018_9.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2020_3.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2020_7.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2021_8.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2020_11.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2020_6.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2019_8.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2022_6.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2018_11.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2018_5.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2018_2.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2022_3.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2019_12.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2019_7.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2019_2.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2020_2.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2022_7.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2019_3.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2019_5.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2022_5.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2019_10.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2021_9.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2020_5.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2022_4.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2019_1.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2021_1.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2021_7.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2020_4.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2022_2.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2021_2.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2021_10.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2018_10.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2018_4.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2020_9.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2020_10.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2021_11.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2020_12.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2021_12.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2021_4.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2019_9.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2019_11.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2021_6.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2019_6.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2020_8.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2018_12.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2021_3.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2018_8.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2021_5.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2018_3.csv\n/kaggle/input/flight-delay-dataset-20182022/raw/Flights_2019_4.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"objectives:\n* Can you predict which flights will be cancelled or delayed?\n* Can you predict the delay time?\n* Can you explore how different airlines compare?","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/flight-delay-dataset-20182022/Combined_Flights_2022.csv\")\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:03:42.524245Z","iopub.execute_input":"2024-07-01T08:03:42.524776Z","iopub.status.idle":"2024-07-01T08:04:42.630310Z","shell.execute_reply.started":"2024-07-01T08:03:42.524730Z","shell.execute_reply":"2024-07-01T08:04:42.624687Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 4078318 entries, 0 to 4078317\nData columns (total 61 columns):\n #   Column                                   Dtype  \n---  ------                                   -----  \n 0   FlightDate                               object \n 1   Airline                                  object \n 2   Origin                                   object \n 3   Dest                                     object \n 4   Cancelled                                bool   \n 5   Diverted                                 bool   \n 6   CRSDepTime                               int64  \n 7   DepTime                                  float64\n 8   DepDelayMinutes                          float64\n 9   DepDelay                                 float64\n 10  ArrTime                                  float64\n 11  ArrDelayMinutes                          float64\n 12  AirTime                                  float64\n 13  CRSElapsedTime                           float64\n 14  ActualElapsedTime                        float64\n 15  Distance                                 float64\n 16  Year                                     int64  \n 17  Quarter                                  int64  \n 18  Month                                    int64  \n 19  DayofMonth                               int64  \n 20  DayOfWeek                                int64  \n 21  Marketing_Airline_Network                object \n 22  Operated_or_Branded_Code_Share_Partners  object \n 23  DOT_ID_Marketing_Airline                 int64  \n 24  IATA_Code_Marketing_Airline              object \n 25  Flight_Number_Marketing_Airline          int64  \n 26  Operating_Airline                        object \n 27  DOT_ID_Operating_Airline                 int64  \n 28  IATA_Code_Operating_Airline              object \n 29  Tail_Number                              object \n 30  Flight_Number_Operating_Airline          int64  \n 31  OriginAirportID                          int64  \n 32  OriginAirportSeqID                       int64  \n 33  OriginCityMarketID                       int64  \n 34  OriginCityName                           object \n 35  OriginState                              object \n 36  OriginStateFips                          int64  \n 37  OriginStateName                          object \n 38  OriginWac                                int64  \n 39  DestAirportID                            int64  \n 40  DestAirportSeqID                         int64  \n 41  DestCityMarketID                         int64  \n 42  DestCityName                             object \n 43  DestState                                object \n 44  DestStateFips                            int64  \n 45  DestStateName                            object \n 46  DestWac                                  int64  \n 47  DepDel15                                 float64\n 48  DepartureDelayGroups                     float64\n 49  DepTimeBlk                               object \n 50  TaxiOut                                  float64\n 51  WheelsOff                                float64\n 52  WheelsOn                                 float64\n 53  TaxiIn                                   float64\n 54  CRSArrTime                               int64  \n 55  ArrDelay                                 float64\n 56  ArrDel15                                 float64\n 57  ArrivalDelayGroups                       float64\n 58  ArrTimeBlk                               object \n 59  DistanceGroup                            int64  \n 60  DivAirportLandings                       int64  \ndtypes: bool(2), float64(18), int64(23), object(18)\nmemory usage: 1.8+ GB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"the memory usage is really really high<br>\ni will only be working with the 2022 database (it already has **4078318 entries**), which should be good enough","metadata":{}},{"cell_type":"markdown","source":"markdown font is beautiful here\nthe columns i think will be good are: gemini says:<br><Br>\n\n* OriginAirportID: Origin airport identifier.\n* DestAirportID: Destination airport identifier.\n* FlightDate: Date of the flight.\n* DayOfWeek: Day of the week (weekday or weekend can impact delays).\n* Month: Month of the flight (seasonal factors can influence delays).\n* Distance: Distance between origin and destination airports (longer distances might have higher delay probabilities).\nScheduled Times:\n\n* CRSDepTime: Scheduled departure time.\n* CRSArrTime: Scheduled arrival time.\n* CRSElapsedTime: Scheduled elapsed time of the flight.\nActual Times (if available):\n\n* DepTime: Actual departure time (useful for calculating delays).\n* ArrTime: Actual arrival time (useful for calculating delays).\n* ActualElapsedTime: Actual elapsed time of the flight.\n\n* DepDelay: Delay in departure time (in minutes).\n* ArrDelay: Delay in arrival time (in minutes).\n* Cancelled: Cancelled flight indicator (1 for cancelled, 0 otherwise).\n* CancellationCode (if available): Reason for cancellation (can help understand cancellation patterns).\n* DepDel15: Indicator for departure delay of 15 minutes or more (useful for binary classification).\n* ArrDel15: Indicator for arrival delay of 15 minutes or more (useful for binary classification).\n* DepartureDelayGroups/ArrivalDelayGroups (if available): Categories of delay duration (can help understand the severity of delays).\nWeather Information (if available):\n\n* WeatherDelay: Delay attributed to weather (in minutes).\nAirline Information:\n\n* Marketing_Airline_Network: Marketing airline network.\n* Operating_Airline: Operating airline.\n\n* OriginState/DestState: Origin and destination state (might capture regional variations in delays).\n* Diverted: Diverted flight indicator (diverted flights can impact delays).","metadata":{}},{"cell_type":"code","source":"column_names = [\n    \"OriginAirportID\",\n    \"DestAirportID\",\n    \"FlightDate\",\n    \"DayOfWeek\",\n    \"Month\",\n    \"Distance\",\n    \"CRSDepTime\",\n    \"CRSArrTime\",\n    \"CRSElapsedTime\",\n    \"DepTime\",  # Assuming available\n    \"ArrTime\",  # Assuming available\n    \"ActualElapsedTime\",  # Assuming available\n    \"DepDelay\",\n    \"ArrDelay\",\n    \"Cancelled\",\n    \"DepartureDelayGroups\",  # If available\n    \"ArrivalDelayGroups\",  # If available\n    \"Operating_Airline\",\n    \"OriginState\",\n    \"DestState\",\n    \"Diverted\"\n]","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:04:42.639860Z","iopub.execute_input":"2024-07-01T08:04:42.641761Z","iopub.status.idle":"2024-07-01T08:04:42.665047Z","shell.execute_reply.started":"2024-07-01T08:04:42.641443Z","shell.execute_reply":"2024-07-01T08:04:42.663586Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"df1 = pd.DataFrame()\nfor p in column_names:\n    df1[p] = df[p]","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:04:42.667975Z","iopub.execute_input":"2024-07-01T08:04:42.668451Z","iopub.status.idle":"2024-07-01T08:04:43.025802Z","shell.execute_reply.started":"2024-07-01T08:04:42.668418Z","shell.execute_reply":"2024-07-01T08:04:43.024460Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"df1['FlightDate'] = pd.to_datetime(df1[\"FlightDate\"])","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:04:43.027467Z","iopub.execute_input":"2024-07-01T08:04:43.027848Z","iopub.status.idle":"2024-07-01T08:04:43.959594Z","shell.execute_reply.started":"2024-07-01T08:04:43.027817Z","shell.execute_reply":"2024-07-01T08:04:43.958341Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":"don't forget to map airline code to name at the end","metadata":{}},{"cell_type":"code","source":"df1.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:04:43.960993Z","iopub.execute_input":"2024-07-01T08:04:43.962335Z","iopub.status.idle":"2024-07-01T08:04:45.511551Z","shell.execute_reply.started":"2024-07-01T08:04:43.962289Z","shell.execute_reply":"2024-07-01T08:04:45.510279Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"OriginAirportID              0\nDestAirportID                0\nFlightDate                   0\nDayOfWeek                    0\nMonth                        0\nDistance                     0\nCRSDepTime                   0\nCRSArrTime                   0\nCRSElapsedTime               0\nDepTime                 120433\nArrTime                 124239\nActualElapsedTime       133402\nDepDelay                120495\nArrDelay                133402\nCancelled                    0\nDepartureDelayGroups    120495\nArrivalDelayGroups      133402\nOperating_Airline            0\nOriginState                  0\nDestState                    0\nDiverted                     0\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"can't really take a mean for times, 100k out of 3m shouldn't make big diff NO<br> lets try knn imputer","metadata":{}},{"cell_type":"code","source":"df1[\"FlightDate\"] = df1[\"FlightDate\"].dt.dayofyear\ndf1[\"FlightDate\"]","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:04:45.512936Z","iopub.execute_input":"2024-07-01T08:04:45.513389Z","iopub.status.idle":"2024-07-01T08:04:45.637209Z","shell.execute_reply.started":"2024-07-01T08:04:45.513347Z","shell.execute_reply":"2024-07-01T08:04:45.636041Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"0          94\n1          94\n2          94\n3          94\n4          94\n           ..\n4078313    90\n4078314    76\n4078315    67\n4078316    84\n4078317    66\nName: FlightDate, Length: 4078318, dtype: int32"},"metadata":{}}]},{"cell_type":"code","source":"sorted(df1.DestState.unique()) == sorted(df1.OriginState.unique())","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:04:45.638544Z","iopub.execute_input":"2024-07-01T08:04:45.638878Z","iopub.status.idle":"2024-07-01T08:04:46.269391Z","shell.execute_reply.started":"2024-07-01T08:04:45.638836Z","shell.execute_reply":"2024-07-01T08:04:46.268138Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}]},{"cell_type":"markdown","source":"use labelencoder","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# Label encode each column\nencoder = LabelEncoder()\n\ndf1['DestState_encoded'] = encoder.fit_transform(df1['DestState'])\ndf1['OriginState_encoded'] = encoder.fit_transform(df1['OriginState'])\ndf1['Operating_Airline_encoded'] = encoder.fit_transform(df1['Operating_Airline'])\n\n# Drop the original columns if you no longer need them (optional)\ndf1.drop(columns=['DestState', 'OriginState', 'Operating_Airline'], inplace=True)\n\ndf1.head()  # View the first few rows to see the encoded columns\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:04:46.270755Z","iopub.execute_input":"2024-07-01T08:04:46.271121Z","iopub.status.idle":"2024-07-01T08:04:50.996032Z","shell.execute_reply.started":"2024-07-01T08:04:46.271088Z","shell.execute_reply":"2024-07-01T08:04:50.994832Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"   OriginAirportID  DestAirportID  FlightDate  DayOfWeek  Month  Distance  \\\n0            11921          11292          94          1      4     212.0   \n1            12206          12266          94          1      4     295.0   \n2            11413          11292          94          1      4     251.0   \n3            12266          11973          94          1      4     376.0   \n4            11413          11292          94          1      4     251.0   \n\n   CRSDepTime  CRSArrTime  CRSElapsedTime  DepTime  ...  ActualElapsedTime  \\\n0        1133        1245            72.0   1123.0  ...               65.0   \n1         732         849            77.0    728.0  ...               80.0   \n2        1529        1639            70.0   1514.0  ...               82.0   \n3        1435        1605            90.0   1430.0  ...               77.0   \n4        1135        1245            70.0   1135.0  ...               76.0   \n\n   DepDelay  ArrDelay  Cancelled  DepartureDelayGroups  ArrivalDelayGroups  \\\n0     -10.0     -17.0      False                  -1.0                -2.0   \n1      -4.0      -1.0      False                  -1.0                -1.0   \n2     -15.0      -3.0      False                  -1.0                -1.0   \n3      -5.0     -18.0      False                  -1.0                -2.0   \n4       0.0       6.0      False                   0.0                 0.0   \n\n   Diverted  DestState_encoded  OriginState_encoded  Operating_Airline_encoded  \n0     False                  5                    5                          4  \n1     False                 44                   44                          4  \n2     False                  5                    5                          4  \n3     False                 24                   44                          4  \n4     False                  5                    5                          4  \n\n[5 rows x 21 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>OriginAirportID</th>\n      <th>DestAirportID</th>\n      <th>FlightDate</th>\n      <th>DayOfWeek</th>\n      <th>Month</th>\n      <th>Distance</th>\n      <th>CRSDepTime</th>\n      <th>CRSArrTime</th>\n      <th>CRSElapsedTime</th>\n      <th>DepTime</th>\n      <th>...</th>\n      <th>ActualElapsedTime</th>\n      <th>DepDelay</th>\n      <th>ArrDelay</th>\n      <th>Cancelled</th>\n      <th>DepartureDelayGroups</th>\n      <th>ArrivalDelayGroups</th>\n      <th>Diverted</th>\n      <th>DestState_encoded</th>\n      <th>OriginState_encoded</th>\n      <th>Operating_Airline_encoded</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>11921</td>\n      <td>11292</td>\n      <td>94</td>\n      <td>1</td>\n      <td>4</td>\n      <td>212.0</td>\n      <td>1133</td>\n      <td>1245</td>\n      <td>72.0</td>\n      <td>1123.0</td>\n      <td>...</td>\n      <td>65.0</td>\n      <td>-10.0</td>\n      <td>-17.0</td>\n      <td>False</td>\n      <td>-1.0</td>\n      <td>-2.0</td>\n      <td>False</td>\n      <td>5</td>\n      <td>5</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12206</td>\n      <td>12266</td>\n      <td>94</td>\n      <td>1</td>\n      <td>4</td>\n      <td>295.0</td>\n      <td>732</td>\n      <td>849</td>\n      <td>77.0</td>\n      <td>728.0</td>\n      <td>...</td>\n      <td>80.0</td>\n      <td>-4.0</td>\n      <td>-1.0</td>\n      <td>False</td>\n      <td>-1.0</td>\n      <td>-1.0</td>\n      <td>False</td>\n      <td>44</td>\n      <td>44</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>11413</td>\n      <td>11292</td>\n      <td>94</td>\n      <td>1</td>\n      <td>4</td>\n      <td>251.0</td>\n      <td>1529</td>\n      <td>1639</td>\n      <td>70.0</td>\n      <td>1514.0</td>\n      <td>...</td>\n      <td>82.0</td>\n      <td>-15.0</td>\n      <td>-3.0</td>\n      <td>False</td>\n      <td>-1.0</td>\n      <td>-1.0</td>\n      <td>False</td>\n      <td>5</td>\n      <td>5</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12266</td>\n      <td>11973</td>\n      <td>94</td>\n      <td>1</td>\n      <td>4</td>\n      <td>376.0</td>\n      <td>1435</td>\n      <td>1605</td>\n      <td>90.0</td>\n      <td>1430.0</td>\n      <td>...</td>\n      <td>77.0</td>\n      <td>-5.0</td>\n      <td>-18.0</td>\n      <td>False</td>\n      <td>-1.0</td>\n      <td>-2.0</td>\n      <td>False</td>\n      <td>24</td>\n      <td>44</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11413</td>\n      <td>11292</td>\n      <td>94</td>\n      <td>1</td>\n      <td>4</td>\n      <td>251.0</td>\n      <td>1135</td>\n      <td>1245</td>\n      <td>70.0</td>\n      <td>1135.0</td>\n      <td>...</td>\n      <td>76.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>False</td>\n      <td>5</td>\n      <td>5</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 21 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# %%time\n# from sklearn.impute import KNNImputer\n\n# # Create a KNNImputer object\n# imputer = KNNImputer(n_neighbors=5)  # Set K to 5 (experiment with different values)\n\n# # Fit the imputer on the training data (without missing values)\n# # Assuming you have separated your data into training and test sets\n# imputer.fit(train)\n\n# # Transform the training and test sets using the fitted imputer\n# train_imputed = imputer.transform(train)\n# # X_test_imputed = imputer.transform(X_test)\n# train_imputed.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:04:50.999919Z","iopub.execute_input":"2024-07-01T08:04:51.000435Z","iopub.status.idle":"2024-07-01T08:04:51.005770Z","shell.execute_reply.started":"2024-07-01T08:04:51.000400Z","shell.execute_reply":"2024-07-01T08:04:51.004594Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":"that did not work, took a loooong time","metadata":{}},{"cell_type":"code","source":"df1.ArrDelay.fillna(df1.ArrDelay.mean(), inplace=True)\ndf1.DepDelay.fillna(df1.DepDelay.mean(), inplace=True)\ndf1.DepartureDelayGroups.fillna(0.0, inplace=True)\ndf1.ArrivalDelayGroups.fillna(0.0, inplace=True)\ndf1.loc[4]","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:04:51.007567Z","iopub.execute_input":"2024-07-01T08:04:51.008617Z","iopub.status.idle":"2024-07-01T08:04:51.124911Z","shell.execute_reply.started":"2024-07-01T08:04:51.008575Z","shell.execute_reply":"2024-07-01T08:04:51.123783Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/607742457.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df1.ArrDelay.fillna(df1.ArrDelay.mean(), inplace=True)\n/tmp/ipykernel_33/607742457.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df1.DepDelay.fillna(df1.DepDelay.mean(), inplace=True)\n/tmp/ipykernel_33/607742457.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df1.DepartureDelayGroups.fillna(0.0, inplace=True)\n/tmp/ipykernel_33/607742457.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df1.ArrivalDelayGroups.fillna(0.0, inplace=True)\n","output_type":"stream"},{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"OriginAirportID               11413\nDestAirportID                 11292\nFlightDate                       94\nDayOfWeek                         1\nMonth                             4\nDistance                      251.0\nCRSDepTime                     1135\nCRSArrTime                     1245\nCRSElapsedTime                 70.0\nDepTime                      1135.0\nArrTime                      1251.0\nActualElapsedTime              76.0\nDepDelay                        0.0\nArrDelay                        6.0\nCancelled                     False\nDepartureDelayGroups            0.0\nArrivalDelayGroups              0.0\nDiverted                      False\nDestState_encoded                 5\nOriginState_encoded               5\nOperating_Airline_encoded         4\nName: 4, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"def impute_time_with_delay(row, scheduled_time_col, delay_col):\n    \"\"\"\n    Imputes missing time considering delays and potential rollover past midnight.\n\n    Args:\n      row: A pandas Series representing a row of the DataFrame.\n      scheduled_time_col: The column name containing scheduled time (CRSDepTime or CRSArrTime).\n      delay_col: The column name containing delay (DepDelay or ArrDelay).\n\n    Returns:\n      The imputed time (int) considering delays and potential rollover.\n    \"\"\"\n    scheduled_time = row[scheduled_time_col]\n    delay = row[delay_col]\n    if (scheduled_time + delay) >= 2400:\n        imputed_time = (scheduled_time + delay) - 2400\n    else:\n        imputed_time = (scheduled_time + delay)\n    return imputed_time\n\n# Apply the function to impute missing DepTime and ArrTime\ndf1['DepTime'] = df1.apply(lambda row: impute_time_with_delay(row, 'CRSDepTime', 'DepDelay'), axis=1)\ndf1['ArrTime'] = df1.apply(lambda row: impute_time_with_delay(row, 'CRSArrTime', 'ArrDelay'), axis=1)\ndf1.loc[df1.ActualElapsedTime.isna(), \"ActualElapsedTime\"] = df1.CRSElapsedTime + df1.DepDelay.mean() - df1.ArrDelay.mean()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:04:51.126327Z","iopub.execute_input":"2024-07-01T08:04:51.126673Z","iopub.status.idle":"2024-07-01T08:07:37.310034Z","shell.execute_reply.started":"2024-07-01T08:04:51.126644Z","shell.execute_reply":"2024-07-01T08:07:37.308544Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"df1.columns","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:07:37.312293Z","iopub.execute_input":"2024-07-01T08:07:37.312815Z","iopub.status.idle":"2024-07-01T08:07:37.324063Z","shell.execute_reply.started":"2024-07-01T08:07:37.312756Z","shell.execute_reply":"2024-07-01T08:07:37.322805Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"Index(['OriginAirportID', 'DestAirportID', 'FlightDate', 'DayOfWeek', 'Month',\n       'Distance', 'CRSDepTime', 'CRSArrTime', 'CRSElapsedTime', 'DepTime',\n       'ArrTime', 'ActualElapsedTime', 'DepDelay', 'ArrDelay', 'Cancelled',\n       'DepartureDelayGroups', 'ArrivalDelayGroups', 'Diverted',\n       'DestState_encoded', 'OriginState_encoded',\n       'Operating_Airline_encoded'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"markdown","source":"add plots afterwards","metadata":{}},{"cell_type":"markdown","source":"there are 3 problems now:\n1. cancellation: binary classification\n2. arrival dealy: regression (put threshold)\n3. departure delay: similar to above<br>\nneed to make three different dfs","metadata":{}},{"cell_type":"code","source":"X_cancel = df1.drop(\"Cancelled\", axis=1)\ny_cancel = df1.Cancelled\nX_arr = df1.drop(\"ArrDelay\", axis=1)\ny_arr = df1.ArrDelay\nX_dep = df1.drop(\"DepDelay\", axis=1)\ny_dep = df1.DepDelay\nprint(\"Shapes of the DataFrames:\")\nprint(f\"X_cancel: {X_cancel.shape}\")\nprint(f\"y_cancel: {y_cancel.shape}\")\nprint(f\"X_arr: {X_arr.shape}\")\nprint(f\"y_arr: {y_arr.shape}\")\nprint(f\"X_dep: {X_dep.shape}\")\nprint(f\"y_dep: {y_dep.shape}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:07:37.325520Z","iopub.execute_input":"2024-07-01T08:07:37.325884Z","iopub.status.idle":"2024-07-01T08:07:38.737820Z","shell.execute_reply.started":"2024-07-01T08:07:37.325853Z","shell.execute_reply":"2024-07-01T08:07:38.736552Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"Shapes of the DataFrames:\nX_cancel: (4078318, 20)\ny_cancel: (4078318,)\nX_arr: (4078318, 20)\ny_arr: (4078318,)\nX_dep: (4078318, 20)\ny_dep: (4078318,)\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\n\ndef split_data(X, y, train_size=0.72, val_size=0.14, test_size=0.14, random_state=42):\n    \"\"\"\n    Splits data into training, validation, and test sets.\n\n    Args:\n      X: The DataFrame containing features.\n      y: The DataFrame containing target variables.\n      train_size: Proportion of data for the training set (default: 0.72).\n      val_size: Proportion of data for the validation set (default: 0.14).\n      test_size: Proportion of data for the test set (default: 0.14).\n      random_state: Seed for random splitting (default: 42).\n\n    Returns:\n      A tuple containing training, validation, and test sets (X_train, X_val, y_train, y_val, X_test, y_test).\n    \"\"\"\n\n    # Split data into training and validation/test sets\n    X_train_val, X_test, y_train_val, y_test = train_test_split(\n        X, y, test_size=test_size, random_state=random_state\n    )\n\n    # Further split training/validation into training and validation\n    X_train, X_val, y_train, y_val = train_test_split(\n        X_train_val, y_train_val, test_size=val_size / (val_size + train_size), random_state=random_state\n    )\n\n    return X_train, X_val, y_train, y_val, X_test, y_test","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:07:38.739211Z","iopub.execute_input":"2024-07-01T08:07:38.739551Z","iopub.status.idle":"2024-07-01T08:07:38.847681Z","shell.execute_reply.started":"2024-07-01T08:07:38.739522Z","shell.execute_reply":"2024-07-01T08:07:38.846636Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":"### for cancel","metadata":{}},{"cell_type":"code","source":"# Example usage (assuming your DataFrames are defined)\nX_cancel_train, X_cancel_val, y_cancel_train, y_cancel_val, X_cancel_test, y_cancel_test = split_data(X_cancel, y_cancel)\n\n# Print the shapes of the resulting DataFrames (optional)\nprint(f\"Training set - X_cancel:\", X_cancel_train.shape)\nprint(f\"Validation set - X_cancel:\", X_cancel_val.shape)\nprint(f\"Test set - X_cancel:\", X_cancel_test.shape)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:07:38.849114Z","iopub.execute_input":"2024-07-01T08:07:38.849530Z","iopub.status.idle":"2024-07-01T08:07:43.375760Z","shell.execute_reply.started":"2024-07-01T08:07:38.849492Z","shell.execute_reply":"2024-07-01T08:07:43.374522Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Training set - X_cancel: (2936388, 20)\nValidation set - X_cancel: (570965, 20)\nTest set - X_cancel: (570965, 20)\n","output_type":"stream"}]},{"cell_type":"code","source":"y_cancel_train","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:07:43.377611Z","iopub.execute_input":"2024-07-01T08:07:43.377972Z","iopub.status.idle":"2024-07-01T08:07:43.387518Z","shell.execute_reply.started":"2024-07-01T08:07:43.377939Z","shell.execute_reply":"2024-07-01T08:07:43.386320Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"827064     False\n1513696    False\n3679538    False\n1057639    False\n3497731    False\n           ...  \n2275644    False\n2389803    False\n2285034    False\n3560238    False\n3759179    False\nName: Cancelled, Length: 2936388, dtype: bool"},"metadata":{}}]},{"cell_type":"code","source":"# Models from Scikit-Learn\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Model Evaluations\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.metrics import precision_score, recall_score, f1_score\n# from sklearn.metrics import plot_roc_curve\n\n# Put models in a dictionary\nmodels = {\"Logistic Regression\": LogisticRegression(),\n          \"KNN\": KNeighborsClassifier(),\n          \"Random Forest\": RandomForestClassifier()}\n\n# Create a function to fit and score models\ndef fit_and_score(models, X_train, X_test, y_train, y_test):\n    \"\"\"\n    Fits and evaluates given machine learning models.\n    models : a dict of differetn Scikit-Learn machine learning models\n    X_train : training data (no labels)\n    X_test : testing data (no labels)\n    y_train : training labels\n    y_test : test labels\n    \"\"\"\n    # Set random seed\n    np.random.seed(42)\n    # Make a dictionary to keep model scores\n    model_scores = {}\n    # Loop through models\n    for name, model in models.items():\n        # Fit the model to the data\n        model.fit(X_train, y_train)\n        # Evaluate the model and append its score to model_scores\n        model_scores[name] = model.score(X_test, y_test)\n    return model_scores","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:07:43.389061Z","iopub.execute_input":"2024-07-01T08:07:43.390194Z","iopub.status.idle":"2024-07-01T08:07:43.769717Z","shell.execute_reply.started":"2024-07-01T08:07:43.390130Z","shell.execute_reply":"2024-07-01T08:07:43.768532Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.exceptions import ConvergenceWarning\nimport warnings\n\nscaler = StandardScaler()\nX_cancel_train_scaled = scaler.fit_transform(X_cancel_train)\nX_cancel_val_scaled = scaler.transform(X_cancel_val)\nX_cancel_test_scaled = scaler.transform(X_cancel_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:07:43.771003Z","iopub.execute_input":"2024-07-01T08:07:43.771396Z","iopub.status.idle":"2024-07-01T08:07:51.144144Z","shell.execute_reply.started":"2024-07-01T08:07:43.771363Z","shell.execute_reply":"2024-07-01T08:07:51.142888Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":"this is yet incomplete, i will add others afterwards\nuse sgdregressor for others","metadata":{}},{"cell_type":"code","source":"X_cancel_val_scaled","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:11:45.951007Z","iopub.execute_input":"2024-07-01T08:11:45.951493Z","iopub.status.idle":"2024-07-01T08:11:45.960777Z","shell.execute_reply.started":"2024-07-01T08:11:45.951458Z","shell.execute_reply":"2024-07-01T08:11:45.959592Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"array([[ 0.35764812,  0.37528331,  1.03984665, ..., -0.64568363,\n        -0.96298702,  1.06768984],\n       [-1.57793264, -1.20815787,  0.64667973, ..., -0.26468292,\n         0.62442947,  1.06768984],\n       [-0.25842746, -1.48662285,  0.10607521, ..., -0.89968411,\n         1.32289272,  0.44260939],\n       ...,\n       [ 0.35764812,  1.43331887, -0.97513384, ...,  0.94181935,\n        -0.96298702,  1.06768984],\n       [-0.54938853,  0.93352678,  0.548388  , ..., -0.96318423,\n        -0.58200706, -0.49501129],\n       [ 1.32905088,  0.54801041,  0.77773537, ..., -0.39168315,\n         1.32289272,  1.06768984]])"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.linear_model import SGDClassifier\nmodel = SGDClassifier(max_iter=1000)\nmodel.fit(X_cancel_train, y_cancel_train)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:19:32.030200Z","iopub.execute_input":"2024-07-01T08:19:32.030647Z","iopub.status.idle":"2024-07-01T08:21:42.409530Z","shell.execute_reply.started":"2024-07-01T08:19:32.030612Z","shell.execute_reply":"2024-07-01T08:21:42.408320Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"SGDClassifier()","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SGDClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDClassifier</label><div class=\"sk-toggleable__content\"><pre>SGDClassifier()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"markdown","source":"            **USE PIPELINES**","metadata":{}},{"cell_type":"code","source":"preds = model.predict(X_cancel_val)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:22:26.110458Z","iopub.execute_input":"2024-07-01T08:22:26.110887Z","iopub.status.idle":"2024-07-01T08:22:26.190944Z","shell.execute_reply.started":"2024-07-01T08:22:26.110853Z","shell.execute_reply":"2024-07-01T08:22:26.189117Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"preds","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:22:31.835525Z","iopub.execute_input":"2024-07-01T08:22:31.835933Z","iopub.status.idle":"2024-07-01T08:22:31.843520Z","shell.execute_reply.started":"2024-07-01T08:22:31.835900Z","shell.execute_reply":"2024-07-01T08:22:31.842247Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"array([False, False, False, ..., False, False, False])"},"metadata":{}}]},{"cell_type":"code","source":"model.score(X_cancel_val, y_cancel_val)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:23:24.909902Z","iopub.execute_input":"2024-07-01T08:23:24.910316Z","iopub.status.idle":"2024-07-01T08:23:25.080962Z","shell.execute_reply.started":"2024-07-01T08:23:24.910283Z","shell.execute_reply":"2024-07-01T08:23:25.079393Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"0.9979140577793735"},"metadata":{}}]},{"cell_type":"code","source":"model.score(X_cancel_test, y_cancel_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-01T08:24:05.751525Z","iopub.execute_input":"2024-07-01T08:24:05.751927Z","iopub.status.idle":"2024-07-01T08:24:05.921275Z","shell.execute_reply.started":"2024-07-01T08:24:05.751896Z","shell.execute_reply":"2024-07-01T08:24:05.919772Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"0.9979245663044145"},"metadata":{}}]},{"cell_type":"raw","source":"A validation accuracy of 0.9979 (almost perfect) and a similar test accuracy are indeed very good results, indicating that your model is performing exceptionally well on this dataset. However, whether it's \"good enough\" depends on several factors:\n\n**1. Context and Cost of Errors:**\n\n- **Domain:** What is the real-world application of this model? In some domains, even a small error could be very costly. For example, a model predicting fraudulent transactions might need very high accuracy to avoid financial losses.\n- **Cost of Misclassification:** What are the consequences of a misclassification? If a misclassified email lands in spam instead of the inbox, it's inconvenient but not critical. However, a misclassified medical diagnosis could have serious consequences.\n\n**2. Potential for Overfitting:**\n\n- **Dataset Size:** How large is your dataset? High accuracy on a small dataset can be misleading, as the model might have simply memorized the training data (overfitting).\n\n**3. Importance of Interpretability:**\n\n- **Explainability:** Is it important to understand why the model makes certain predictions? If so, simpler models or techniques might be preferred. Stochastic Gradient Descent classifiers (SGDClassifiers) can be less interpretable than other models like decision trees.\n\n**Here are some things you might consider, depending on your specific situation:**\n\n- **Error Analysis:** Take a closer look at the misclassified examples on the test set. What features are associated with these errors? Can you identify patterns that might help improve the model?\n- **Cross-validation:** Consider using techniques like k-fold cross-validation to get a more reliable estimate of the model's generalization performance. This helps reduce the chance of overfitting to a specific validation set split.\n- **Alternative Models:** If interpretability is important, you could explore models like decision trees or rule-based systems that offer more insights into why predictions are made.\n- **Cost-sensitive Learning:** If certain types of errors are more costly, you could explore cost-sensitive learning techniques that penalize the model more heavily for those types of errors.\n\n**In conclusion:**\n\nA score of 0.9979 is exceptional, but it's crucial to consider the context of your problem before deciding if it's sufficient. Analyze the potential for overfitting, understand the cost of errors, and explore further options based on your specific needs.","metadata":{}}]}